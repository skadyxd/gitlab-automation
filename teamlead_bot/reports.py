from abc import abstractmethod, ABC

from teamlead_bot.Issue import IssueManager
from teamlead_bot.sprint import Sprint


class IReport(ABC):
    manager = IssueManager

    @classmethod
    @abstractmethod
    def build(cls, *args):
        pass


class PriorityReport(IReport):
    tmp_prefix_name = 'PriorityReport'

    raw = (
        "- {} | {} | {} | {} | {} | {}"  # –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
    )

    @classmethod
    def build(cls, issues, sprint: Sprint):
        manager = cls.manager(issues)
        result = []

        # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω
        status_order = ['–í —Ä–∞–±–æ—Ç–µ', '–ù–∞–∑–Ω–∞—á–µ–Ω–æ', '–ë—ç–∫–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∞', '–ü–∞—É–∑–∞']

        for dev in manager.developer_generate():
            dev_issues = manager.get_issues_by_assignee(dev)

            if not dev_issues:
                continue

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã)
            filtered_issues = [i for i in dev_issues if i.status in status_order]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É, –∑–∞—Ç–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            sorted_issues = sorted(
                filtered_issues,
                key=lambda i: (status_order.index(i.status), i.priority)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
            if sorted_issues:
                result.append(f"üë§ {dev}:")

            for issue in sorted_issues:
                priority_name = cls.get_priority_name(issue.priority)
                result.append(cls.raw.format(
                    issue.status,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    priority_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    issue.name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    f"https://jira.zyfra.com/browse/{issue.key}",  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira
                    f"{issue.original_estimate}—á",  # –ò—Å—Ö–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                    f"{issue.remaining_estimate}—á"  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                ))

            if sorted_issues:
                result.append("")

        final_result = "\n".join(result)
        if not final_result.strip():
            final_result = "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

        return final_result

    @staticmethod
    def get_priority_name(priority):
        priority_mapping = {
            1: '–ö—Ä–∏—Ç–∏—á–Ω—ã–π',
            2: '–í—ã—Å–æ–∫–∏–π',
            3: '–°—Ä–µ–¥–Ω–∏–π',
            4: '–ù–∏–∑–∫–∏–π',
            5: '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π',
            6: '–ë–ª–æ–∫–∏—Ä—É—é—â–∏–π',
            7: '–ú–∏–Ω–æ—Ä'
        }
        return priority_mapping.get(priority, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')


class StatusByDeveloperReport(IReport):
    tmp_prefix_name = 'StatusByDeveloperReport'
    raw = (
        "------------------- \n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {} \n"
        "–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {} \n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Å–ø—Ä–∏–Ω—Ç–µ: {} —á–∞—Å–æ–≤"
    )

    @classmethod
    def build(cls, issues, sprint: Sprint):
        manager = cls.manager(issues)
        result = []

        for dev in manager.developer_generate():
            _speed = manager.calculate_speed_by_developer(dev)
            speed = round(_speed, 1) if _speed else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            available_hours_in_sprint = sprint.remaining_hours_by_one
            remaining_estimate = manager.calculate_remaining_estimate(developer=dev, type_status='active')
            available = round(available_hours_in_sprint - remaining_estimate)

            result.append(cls.raw.format(
                dev, speed, available
            ))
        return "\n".join(result)


class StatusByTeamReport(IReport):
    tmp_prefix_name = 'StatusByTeamReport'
    raw = (
        # "_________________________________ \n"
        "–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:: {}% \n"
        "–§–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:: {}% \n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ backend: {} \n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ fronend: {}"
    )

    @classmethod
    def build(cls, issues, sprint: Sprint):
        manager = cls.manager(issues)
        plan_percent = 100 - sprint.remaining_hours_all / sprint.original_hours_all * 100
        backend_available = 0
        frontend_available = 0

        sum_original_estimate = 0
        sum_remaining_estimate = 0

        for dev in manager.developer_generate('backend'):
            available_hours_in_sprint = sprint.remaining_hours_by_one

            remaining_estimate = manager.calculate_remaining_estimate(developer=dev, type_status='active')
            original_estimate = manager.calculate_original_estimate(developer=dev, type_status='active')

            sum_original_estimate += original_estimate
            sum_remaining_estimate += remaining_estimate
            backend_available += available_hours_in_sprint - remaining_estimate

        for dev in manager.developer_generate('frontend'):
            available_hours_in_sprint = sprint.remaining_hours_by_one

            remaining_estimate = manager.calculate_remaining_estimate(developer=dev, type_status='active')
            original_estimate = manager.calculate_original_estimate(developer=dev, type_status='active')

            sum_original_estimate += original_estimate
            sum_remaining_estimate += remaining_estimate
            frontend_available += available_hours_in_sprint - remaining_estimate

        fact_percent = round(100 - sum_remaining_estimate / sum_original_estimate * 100)

        return cls.raw.format(
            plan_percent,
            fact_percent,
            backend_available,
            frontend_available
        )
